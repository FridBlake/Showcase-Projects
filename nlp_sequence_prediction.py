# -*- coding: utf-8 -*-
"""NLP sequence prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c_C2UEo4UItKeNWAg3BtlTUVIbzQme_T
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import numpy as np
import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

##printing the text
text = data = "October arrived, spreading a damp chill over the grounds and into the castle.\n Madam Pomfrey, the nurse, was kept busy by a sudden spate of colds among the staff and students.\n Her Pepperup potion worked instantly, though it left the drinker smoking at the ears for several hours afterward. Ginny Weasley, who had been looking pale, was bullied into taking some by Percy.\n The steam pouring from under her vivid hair gave the impression that her whole head was on fire.\n Raindrops the size of bullets thundered on the castle windows for days on end; the lake rose, the flower beds turned into muddy streams, and Hagrid's pumpkins swelled to the size of garden sheds.\n Oliver Wood's enthusiasm for regular training sessions, however, was not dampened, which was why Harry was to be found, late one stormy Saturday afternoon a few days before Halloween, returning to Gryffindor Tower, drenched to the skin and splattered with mud."
print(len(text))

corpus = text.lower().split('\n')

# tokenizing
tokenizer = Tokenizer()
tokenizer.fit_on_texts(corpus)
vocab_size = len(tokenizer.word_index) + 1 # extra 1 for the OOV token.

print(tokenizer.word_index)
print(vocab_size)

input_sequences = []
for i in corpus:
    tokens = tokenizer.texts_to_sequences([i])[0]
    for i in range(1, len(tokens)):
        n_gram_sequences = tokens[:i+1]
        input_sequences.append(n_gram_sequences)

#now we pad the sequences.
max_len = max([len(i) for i in input_sequences])
input_sequence_array = np.array(pad_sequences(input_sequences, maxlen = max_len, padding="pre"))

X = input_sequence_array[:,:-1]
y = input_sequence_array[:, -1]

# one hot encoding the y variable
y = tf.keras.utils.to_categorical(y, num_classes = vocab_size)

model = tf.keras.Sequential()
model.add(tf.keras.layers.Embedding(vocab_size, 32, input_length=max_len-1)) # -1 because the last element is for the output
model.add(tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences = False)))
model.add(tf.keras.layers.Dense(vocab_size, activation="softmax"))

model.summary()

model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=['accuracy'])
history = model.fit(X, y, epochs=100, verbose=1)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], color="blue")
plt.plot(history.history['loss'], color="red")
plt.xlabel("epochs")
plt.show()

import numpy as np

next = ""
seed = "october was here"

for _ in range(100):
    tokens = tokenizer.texts_to_sequences([seed])[0]
    tokens = pad_sequences([tokens], maxlen = max_len - 1, padding="pre")
    predicted = np.argmax(model.predict(tokens), axis=-1)

    def get_keys_from_value(d, val):
        return [k for k, v in d.items() if v == val]

    next = get_keys_from_value(tokenizer.word_index, predicted[0])[0]
    seed += f' {next}'

print(seed)



